/*
// Definition for singly-linked list.
struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};
*/

class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        vector<ListNode*> result(k, nullptr);
        
        // Calculate the length of the linked list
        int length = 0;
        ListNode* temp = head;
        while (temp) {
            length++;
            temp = temp->next;
        }
        
        // Calculate the size of each part
        int partSize = length / k;
        int extra = length % k;  // Number of parts with size partSize + 1
        
        ListNode* current = head;
        ListNode* prev = nullptr;
        for (int i = 0; i < k && current; i++) {
            result[i] = current;
            
            // Calculate the size of this part
            int currentPartSize = partSize + (i < extra ? 1 : 0);
            
            // Traverse the current part
            for (int j = 0; j < currentPartSize; j++) {
                prev = current;
                current = current->next;
            }
            
            // Disconnect the current part from the rest of the list
            if (prev) {
                prev->next = nullptr;
            }
        }
        
        return result;
    }
};
